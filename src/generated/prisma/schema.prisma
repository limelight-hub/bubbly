// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// password: discord123!!! (for supabase integration)
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String         @id @default(uuid())
  userId    String         @unique
  name      String
  imageUrl  String         @db.Text
  email     String         @db.Text
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  servers   Server[]
  members   ServerMember[]
  channels  Channel[]

  @@index([userId])
}

model Server {
  id         String         @id @default(uuid())
  name       String
  imageUrl   String         @db.Text
  inviteCode String         @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  profileId  String
  profile    Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    ServerMember[]
  channels   Channel[]

  @@index([profileId])
}

enum ServerRole {
  ADMIN
  MODERATOR
  GUEST
}

model ServerMember {
  id        String     @id @default(uuid())
  role      ServerRole @default(GUEST)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([serverId])
  @@index([profileId])
}

enum ChannelType {
  TEXT
  VOICE
  AUDIO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([serverId])
  @@index([profileId])
}
